apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'StartRestServer'


repositories {
    mavenCentral()
}
// end::repositories[]
sourceSets
        {
            main {
                java {
                    srcDirs 'src/main'
                }
            }
            test {
                java {
                    srcDirs 'test/src'
                }
            }
        }


// tag::jar[]
jar {
    baseName = 'Parcelsize'
    version = '0.1'
    manifest {
        attributes 'Main-Class': 'StartRestServer'
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

}
// end::jar[]


// tag::dependencies[]
dependencies {
    // JERSEY
    // https://mvnrepository.com/artifact/com.sun.jersey/jersey-bundle
    compile group: 'com.sun.jersey', name: 'jersey-bundle', version: '1.19.4'


    // ASM CORE
    // https://mvnrepository.com/artifact/asm/asm-all
    compile group: 'asm', name: 'asm-all', version: '3.1'

    // JSR
    // https://mvnrepository.com/artifact/org.apache.bval/bval-jsr
    //compile group: 'org.apache.bval', name: 'bval-jsr', version: '1.1.1'

    // https://mvnrepository.com/artifact/javax.ws.rs/jsr311-api
    compile group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'

    // JAVA-JSON
    // https://mvnrepository.com/artifact/org.json/json
    //compile group: 'org.json', name: 'json', version: '20180130'

    // GENSON (JSON for Jersey)
    // https://mvnrepository.com/artifact/com.owlike/genson
    compile group: 'com.owlike', name: 'genson', version: '1.5'


    // JUNIT
    // https://mvnrepository.com/artifact/junit/junit


    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')


    // Download Jackson (for JSON interaction in JAVA code)
    testCompile("org.codehaus.jackson:jackson-mapper-asl:1.9.0")

    // Download selenium plugins for UAT Tests
    compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.8.15'
    //compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

    //Download phantomjs for web testing
    compile group: 'com.codeborne', name: 'phantomjsdriver', version: '1.4.4'


    // MySQL connector
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'


}
// end::dependencies[]

test {
    useJUnitPlatform()
}


task buildLocal(type: WriteProperties){
        outputFile file("java.properties")
        property 'mySqlPath', "jdbc:mysql://localhost/sfta?user=root&password=&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"
}
buildLocal.finalizedBy(build)


task changePathForDocker(type: WriteProperties){
    outputFile file("java.properties")
    property 'mySqlPath', "jdbc:mysql://db/sfta?user=root&password=&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"

}



task copySettings(type: Copy) {
    from file("java.properties")
    into file("$buildDir/libs/")
}


task buildDocker {
    dependsOn('changePathForDocker')
    dependsOn('copySettings')
    changePathForDocker.finalizedBy(copySettings)
}

task runIntegrationTest(type: JavaExec) { 
    
}